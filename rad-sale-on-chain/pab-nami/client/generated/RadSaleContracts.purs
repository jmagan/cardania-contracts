-- File auto generated by purescript-bridge! --
module RadSaleContracts where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Script (TokenSaleParam)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data RadSaleContracts
  = Start TokenSaleParam
  | Buy TokenSaleParam
  | Close TokenSaleParam

derive instance Eq RadSaleContracts

derive instance Ord RadSaleContracts

instance Show RadSaleContracts where
  show a = genericShow a

instance EncodeJson RadSaleContracts where
  encodeJson = defer \_ -> case _ of
    Start a -> E.encodeTagged "Start" a E.value
    Buy a -> E.encodeTagged "Buy" a E.value
    Close a -> E.encodeTagged "Close" a E.value

instance DecodeJson RadSaleContracts where
  decodeJson = defer \_ -> D.decode
    $ D.sumType "RadSaleContracts" $ Map.fromFoldable
      [ "Start" /\ D.content (Start <$> D.value)
      , "Buy" /\ D.content (Buy <$> D.value)
      , "Close" /\ D.content (Close <$> D.value)
      ]

derive instance Generic RadSaleContracts _

--------------------------------------------------------------------------------

_Start :: Prism' RadSaleContracts TokenSaleParam
_Start = prism' Start case _ of
  (Start a) -> Just a
  _ -> Nothing

_Buy :: Prism' RadSaleContracts TokenSaleParam
_Buy = prism' Buy case _ of
  (Buy a) -> Just a
  _ -> Nothing

_Close :: Prism' RadSaleContracts TokenSaleParam
_Close = prism' Close case _ of
  (Close a) -> Just a
  _ -> Nothing
